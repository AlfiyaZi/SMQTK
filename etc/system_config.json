// Comments are allowed in JSON files used with the SMQTK system. They are
// parsed out using the smqtk.utils.jsmin module.
{
    "DataSets": {
        // name: {
        //     "type": <class name from get_data_set_impls()>,
        //     "init": {
        //         kwargs to pass to constructor
        //     }
        // }
        "example_image": {
            "type": "DataFileSet",
            "init": {
                // Prefix this directory with where it should be stored
                "root_directory": "FileDataSets/example_image/data"
            }
        },
        "example_video": {
            "type": "DataFileSet",
            "init": {
                // Prefix this directory with where it should be stored
                "root_directory": "FileDataSets/example_video/data"
            }
        }
    },

    "DescriptorElementFactories": {
        // For a list of available descriptor types, see the
        // smqtk.data_rep.descriptor_element_impl module.
        //
        // ``init`` block should not specify type_str or uuid construction
        // parameters.

        // Memory-based descriptor storage
        "MemoryDescriptorFactory": {
            "type": "DescriptorMemoryElement",
            "init": {
                // No initialization parameters for this factory, simply stores
                // vectors in local RAM.
                //
                // Other descriptor implementation construction parameters,
                // i.e. parameters other than the type string and UUID, should
                // be set here.
            }
        },

        // File-based descriptor storage
        "LocalDiskFactory": {
            "type": "DescriptorFileElement",
            "init": {
                // Prefix this directory with where it should be stored
                "save_dir": "LocalDescriptors"
            }
        },

        "LocalSolrFactory": {
            "type": "SolrDescriptorElement",
            "init": {
                "persistent_connection": false,
                "solr_conn_addr": "http://localhost:8983/solr",
                // Arbitrarily picked field names. Tune these to the actual
                // solr instance used.
                "type_field": "type_s",
                "uuid_field": "uuid_s",
                "vector_field": "descriptor_fs",
                "timestamp_field": "timestamp_f"
            }
        }
    },

    "ContentDescriptors": {
        // "name": {
        //     "type": "typeName",
        //     "init": {
        //         "kwargs": "here"
        //     }
        // }
        "CD_CSIFT_Image_example": {
            "type": "ColorDescriptor_Image_csift",
            "init": {
                // Prefix this directory with where it should be stored
                "model_directory": "ContentDescriptors/ColorDescriptor/csift/example_image",
                "work_directory": "ContentDescriptors/ColorDescriptor/csift/example_image",
                "random_seed": 42,
                // model generation parameters
                "kmeans_k": 256
            }
        },
        "CD_CSIFT_Image_example_spatial": {
            "type": "ColorDescriptor_Image_csift",
            "init": {
                // Prefix this directory with where it should be stored
                "model_directory": "ContentDescriptors/ColorDescriptor/csift/example_image",
                "work_directory": "ContentDescriptors/ColorDescriptor/csift/example_image",
                "random_seed": 42,
                // model generation parameters
                "kmeans_k": 256,
                "use_spatial_pyramid": true
            }
        },
        "CD_RGSIFT_Image_example": {
            "type": "ColorDescriptor_Image_rgsift",
            "init": {
                // Prefix this directory with where it should be stored
                "model_directory": "ContentDescriptors/ColorDescriptor/rgsift/example_image",
                "work_directory": "ContentDescriptors/ColorDescriptor/rgsift/example_image",
                "random_seed": 42,
                // model generation parameters
                "kmeans_k": 256
            }
        },
        "CD_CSIFT_Video_example": {
            "type": "ColorDescriptor_Video_csift",
            "init": {
                // Prefix this directory with where it should be stored
                "model_directory": "ContentDescriptors/ColorDescriptor/csift/example_video",
                "work_directory": "ContentDescriptors/ColorDescriptor/csift/example_video",
                "random_seed": 42,
                // model generation parameters
                "kmeans_k": 512
            }
        }
    },

    "LSHCodeIndices": {
        "MemoryIndex": {
            "type": "MemoryCodeIndex",
            "init": {
                // No Initialization parameters
            }
        }
    }

}
